%MATLAB codes for data pre-processing and mass univariate analysis of data
%from the Visual Search study; MATLAB R2020a or R2020b
%Author: zeguo.qiu@uq.net.au


%% EEG data pre-processing
EEG = pop_loadbv('R:\Experiment_Search\RawData\', '1.vhdr',[], [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]); % Load raw .eeg file                                                                            
EEG = pop_chanedit(EEG, 'lookup','eeglab2021.0\\plugins\\dipfit\\standard_BEM\\elec\\standard_1020.elc');     % Load channel location file
EEG = pop_interp(EEG, [1], 'spherical');                                                                   % Interpolation (optional)
EEG = pop_eegfiltnew( EEG,'locutoff',0.1,'hicutoff',30,'plotfreqz',1);                                      % Band-pass filtering
EEG = pop_eegfiltnew( EEG,'locutoff',50,'revfilt',1,'plotfreqz',1);                                         % Notch filtering
EEG = pop_reref( EEG,[],'exclude',[30:32] );                                                                % Rereferencing

%% Customised ICA
%Citations:Dimigen, O., Sommer, W., Hohlfeld, A., Jacobs, A. M., & Kliegl, R. (2011). Coregistration of eye movements and EEG in natural reading: analyses and review. Journal of experimental psychology: General, 140(4), 552.
%%%%%%%%%%%Dimigen, O. (2020). Optimizing the ICA-based removal of ocular EEG artifacts from free viewing experiments. NeuroImage, 207, 116117.

%Make a temporary copy of the EEGset
EEG_train = EEG;
%Define some variables
HIPASS           = 2.5
OW_FACTOR        = 1
REMOVE_EPOCHMEAN = true
EEG_CHANNELS     = 1:31
EEG_training = pop_eegfiltnew(EEG_train,HIPASS,[]); 
%Cut training data into epochs, e.g. around fixation onsets (as in Dimigen, 2020)
EEG_training = pop_epoch(EEG_training,{'S 19'},[-0.2 2.8]);                 %default max value is 2.8, can change to 5.6 or up for clean datasets
%Overweight spike potentials
EEG_training = pop_overweightevents(EEG_training,'saccade',[-0.02 0.01],OW_FACTOR,REMOVE_EPOCHMEAN);
%Run ICA 
EEG_training = pop_runica(EEG_training,'extended',1,'interupt','on','chanind',EEG_CHANNELS,'pca',31); % 31
%Remember ICA weights & sphering matrix 
wts = EEG_training.icaweights;
sph = EEG_training.icasphere;
%Remove any existing ICA solutions from the original dataset
EEG.icaact      = [];
EEG.icasphere   = [];
EEG.icaweights  = [];
EEG.icachansind = [];
EEG.icawinv     = [];
%Transfer unmixing weights
EEG.icasphere   = sph;
EEG.icaweights  = wts;
EEG.icachansind = EEG_CHANNELS;
EEG = eeg_checkset(EEG);


%% After eye-related ICs are removed, prepare data for ERP averaging
EEG = pop_creabasiceventlist( EEG,'Eventlist','EventList111.txt','BoundaryString',{'boundary'},...
    'BoundaryNumeric',{-99},'Warning','on','AlphanumericCleaning','on','History','gui');                    % Create Event list                         
EEG  = pop_binlister( EEG , 'BDF', 'Bin_descriptor.txt', 'ExportEL', 'Elist1.txt', 'IndexEL',...
    1, 'SendEL2', 'EEG&Text', 'UpdateEEG', 'on', 'Voutput', 'EEG' );                                        % Assign bins
EEG = pop_epochbin( EEG , [-100.0  1000.0],  'pre');                                                        % Extract bin-based epochs
EEG = pop_artextval( EEG , 'Channel',  1:29, 'Flag',  1, 'Threshold', [ -80 80], 'Twindow', [ -99.6 998] ); % Artefacts detection


%% Factorial Mass Univariate Analysis
%Make sure all EEGLAB functions are on the MATLAB path
[ALLEEG, EEG, CURRENTSET, ALLCOM] = eeglab;
close all;
%ERP sets to include in GND
subs = {'MUA\1.erp', ...
        'MUA\2.erp', ...
        'MUA\3.erp', ...
        'MUA\4.erp', ...
        'MUA\5.erp', ...
        'MUA\6.erp', ...
        'MUA\7.erp', ...
        'MUA\8.erp', ...
        'MUA\9.erp', ...
        'MUA\10.erp', ...
        'MUA\11.erp', ...
        'MUA\12.erp', ...
        'MUA\13.erp', ...
        'MUA\14.erp', ...
        'MUA\15.erp', ...
        'MUA\16.erp', ...
        'MUA\17.erp', ...
        'MUA\18.erp', ...
        'MUA\19.erp', ...
        'MUA\20.erp', ...
        'MUA\21.erp', ...
        'MUA\22.erp', ...
        'MUA\23.erp', ...
        'MUA\24.erp', ...
        'MUA\25.erp', ...
        'MUA\27.erp', ...
        'MUA\28.erp', ...
        'MUA\30.erp', ...
        'MUA\31.erp', ...
        'MUA\32.erp', ...
        };
%Create GND    
GND = erplab2GND(subs, ...
                'use_bins', [1 6 18 19], ...
                'exp_name', 'Search', ...
                'out_fname', 'Search32Ps.GND');
%Downsample the data in the GND from 512Hz to 128 Hz using boxcar filter
%Filter averages together each time point with the surrounding 2 time
%points
GND = decimateGND(GND, 2, 'boxcar', [-200 -1], 'yes', 0);
load('Search32Psds.GND', '-mat');
%Calculate difference bins for follow-up t-tests
GND=bin_dif(GND,1,2,'Unaware_Fear_Neutral'); 
GND=bin_dif(GND,3,4,'Aware_Fear_Neutral'); 
%Fmax on posterior electrodes
GND = FmaxGND(GND, 'bins', 1:4, ...  
                'factor_names', {'emotion', 'awareness'}, ...  
                'factor_levels', [2,2], ...
               'time_wind', [0, 994], ...
               'include_chans', {'P7','P8','PO9','PO7','PO3','PO4','PO8','PO10','O1','Oz','O2'},...
               'n_perm', 10000, ...
               'alpha', 0.05);
%Fmax on parietal electrodes
GND = FmaxGND(GND, 'bins', 1:4, ...  
                'factor_names', {'emotion', 'awareness'}, ...  
                'factor_levels', [2,2], ...
               'time_wind', [0, 994], ...
               'include_chans', {'PO3','PO4','P3','Pz','P4'},...
               'n_perm', 10000, ...
               'alpha', 0.05);
%Define some variables
nperm = 10000;
window = [0 994];
alpha = 0.05
%tmax for follow-up tests
[GND, prm_pval1, data_t1, crit_t1] = tmaxGND(GND,  5, 'tail', tail,...
    'alpha', alpha, 'n_perm', nperm, 'time_wind', window,... 
    'include_chans',{'P7','P8','PO9','PO7','PO3','PO4','PO8','PO10','O1','Oz','O2'}); 
[GND, prm_pval1, data_t1, crit_t1] = tmaxGND(GND,  5, 'tail', tail,...
    'alpha', alpha, 'n_perm', nperm, 'time_wind', window,... 
    'include_chans',{'PO3','PO4','P3','Pz','P4'}); 
           
           